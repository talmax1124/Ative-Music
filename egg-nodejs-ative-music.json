{
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-09-09T16:45:00+00:00",
  "name": "Ative Music Bot",
  "author": "support@ative.com",
  "description": "Advanced Discord music bot with multi-source support and video streaming",
  "features": [],
  "docker_images": {
    "Nodejs 20": "ghcr.io/ptero-eggs/yolks:nodejs_20",
    "Nodejs 18": "ghcr.io/ptero-eggs/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "if [[ -d .git ]] && [[ {{AUTO_UPDATE}} == \"1\" ]]; then git pull; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then /usr/local/bin/npm install; fi; /usr/local/bin/node \"/home/container/${MAIN_FILE}\"",
  "config": {
    "files": "{}",
    "startup": "{\r\n    \"done\": [\r\n        \"ðŸŽµ Ative Music Bot is ready!\",\r\n        \"Bot is ready!\",\r\n        \"Ready!\",\r\n        \"logged in\"\r\n    ]\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\r\n# Ative Music Bot Installation Script\r\n\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-dev python3-pip libtool\r\n\r\n# Install FFmpeg and audio processing dependencies\r\napt install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev\r\n\r\n# Install additional audio/video processing libraries\r\napt install -y libopus-dev libsodium-dev\r\n\r\necho -e \"updating npm. please wait...\"\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo -e \"assuming user knows what they are doing have a good day.\"\r\n    exit 0\r\nfi\r\n\r\n## add git ending if it's not on the address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo -e \"using anon api call\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n## Standard git clone\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo -e \"/mnt/server directory is not empty.\"\r\n    if [ -d .git ]; then\r\n        echo -e \".git directory exists\"\r\n        if [ -f .git/config ]; then\r\n            echo -e \"loading info from git config\"\r\n            ORIGIN=$(git config --get remote.origin.url)\r\n        else\r\n            echo -e \"files found with no git config\"\r\n            echo -e \"closing out without touching things to not break anything\"\r\n            exit 10\r\n        fi\r\n    fi\r\n\r\n    if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n        echo \"pulling latest from github\"\r\n        git pull\r\n    fi\r\nelse\r\n    echo -e \"/mnt/server is empty.\\ncloning files into repo\"\r\n    if [ -z ${BRANCH} ]; then\r\n        echo -e \"cloning default branch\"\r\n        git clone ${GIT_ADDRESS} .\r\n    else\r\n        echo -e \"cloning ${BRANCH}\"\r\n        git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} .\r\n    fi\r\nfi\r\n\r\necho \"Installing nodejs packages\"\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\nif [ -f /mnt/server/package.json ]; then\r\n    echo \"Installing dependencies...\"\r\n    /usr/local/bin/npm install\r\nfi\r\n\r\n# Create required directories\r\nmkdir -p data cache\r\n\r\necho -e \"install complete\"\r\nexit 0",
      "container": "node:20-bullseye",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "Git Repo Address",
      "description": "GitHub Repo to clone",
      "env_variable": "GIT_ADDRESS",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Install Branch",
      "description": "The branch to install.",
      "env_variable": "BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "User Uploads",
      "description": "Skip git and use uploaded files",
      "env_variable": "USER_UPLOAD",
      "default_value": "0",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|boolean",
      "field_type": "text"
    },
    {
      "name": "Auto Update",
      "description": "Pull latest changes on restart",
      "env_variable": "AUTO_UPDATE",
      "default_value": "1",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|boolean",
      "field_type": "text"
    },
    {
      "name": "Main File",
      "description": "Main application file",
      "env_variable": "MAIN_FILE",
      "default_value": "start.js",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Discord Token",
      "description": "Discord bot token",
      "env_variable": "DISCORD_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Discord Client ID",
      "description": "Discord application client ID",
      "env_variable": "CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client ID",
      "description": "Spotify API Client ID (Optional)",
      "env_variable": "SPOTIFY_CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client Secret",
      "description": "Spotify API Client Secret (Optional)",
      "env_variable": "SPOTIFY_CLIENT_SECRET",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Key ID",
      "description": "Apple Music API Key ID (Optional)",
      "env_variable": "APPLE_MUSIC_KEY_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Team ID",
      "description": "Apple Music API Team ID (Optional)",
      "env_variable": "APPLE_MUSIC_TEAM_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Private Key",
      "description": "Apple Music API Private Key (Optional)",
      "env_variable": "APPLE_MUSIC_PRIVATE_KEY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node environment (development/production)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Additional Node Packages",
      "description": "Extra npm packages to install",
      "env_variable": "NODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Node Packages to Uninstall",
      "description": "Npm packages to uninstall",
      "env_variable": "UNNODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Username",
      "description": "Git username for private repos",
      "env_variable": "USERNAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Access Token",
      "description": "Git access token for private repos",
      "env_variable": "ACCESS_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    }
  ]
}