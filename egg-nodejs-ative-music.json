{
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-09-09T16:45:00+00:00",
  "name": "Ative Music Bot",
  "author": "support@ative.com",
  "description": "Advanced Discord music bot with multi-source support and video streaming",
  "features": [],
  "docker_images": {
    "Nodejs 20": "ghcr.io/ptero-eggs/yolks:nodejs_20",
    "Nodejs 18": "ghcr.io/ptero-eggs/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "if [[ -d .git ]]; then echo \"Forcing update to latest version...\"; git fetch origin && git reset --hard origin/${BRANCH:-main}; echo \"Git update completed.\"; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; echo \"Checking for package.json...\"; if [ -f /home/container/package.json ]; then echo \"Installing npm dependencies...\"; /usr/local/bin/npm install --verbose; echo \"Dependencies installation completed.\"; else echo \"No package.json found!\"; fi; /usr/local/bin/node \"/home/container/${MAIN_FILE}\"",
  "config": {
    "files": "{}",
    "startup": "{\r\n    \"done\": [\r\n        \"üéµ Ative Music Bot is ready!\",\r\n        \"Bot is ready!\",\r\n        \"Ready!\",\r\n        \"logged in\"\r\n    ]\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\r\n# Ative Music Bot Installation Script - BULLETPROOF VERSION\r\n# Comprehensive installation for VPS deployment\r\n\r\nset -e  # Exit on any error\r\n\r\necho \"=== ATIVE MUSIC BOT INSTALLATION ===\"\r\necho \"Installing system dependencies...\"\r\n\r\n# Update package lists\r\napt update\r\n\r\n# Install essential build tools and libraries\r\napt install -y git curl wget jq file unzip make gcc g++ python3 python3-dev python3-pip python3-venv libtool pkg-config\r\n\r\n# Install FFmpeg and complete audio/video processing stack\r\necho \"Installing FFmpeg and media libraries...\"\r\napt install -y ffmpeg libavcodec-dev libavformat-dev libavutil-dev libswscale-dev libavfilter-dev\r\n\r\n# Install Discord voice dependencies\r\necho \"Installing Discord voice dependencies...\"\r\napt install -y libopus-dev libsodium-dev libnss3-dev libatk-bridge2.0-dev libxss1 libasound2-dev\r\n\r\n# CRITICAL: Install yt-dlp with multiple fallback methods\r\necho \"Installing yt-dlp (CRITICAL FOR MUSIC STREAMING)...\"\r\n\r\n# Method 1: pip3 install\r\necho \"Attempting yt-dlp installation via pip3...\"\r\npip3 install --upgrade --break-system-packages yt-dlp || true\r\n\r\n# Method 2: Direct binary download if pip fails\r\nif ! command -v yt-dlp &> /dev/null; then\r\n    echo \"pip3 method failed, downloading yt-dlp binary...\"\r\n    curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\r\n    chmod +x /usr/local/bin/yt-dlp\r\nfi\r\n\r\n# Method 3: Python module installation as fallback\r\nif ! command -v yt-dlp &> /dev/null; then\r\n    echo \"Binary method failed, installing as Python module...\"\r\n    python3 -m pip install --upgrade --break-system-packages yt-dlp || true\r\nfi\r\n\r\n# Final verification\r\necho \"Verifying yt-dlp installation...\"\r\nif command -v yt-dlp &> /dev/null; then\r\n    yt-dlp --version\r\n    echo \"‚úÖ yt-dlp installed successfully!\"\r\nelse\r\n    echo \"‚ö†Ô∏è yt-dlp installation failed - bot will use fallback methods\"\r\nfi\r\n\r\n# Update npm to latest version\r\necho \"Updating npm...\"\r\nnpm install npm@latest --location=global\r\n\r\n# Create server directory\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\n# Handle user uploads\r\nif [ \"${USER_UPLOAD}\" == \"true\" ] || [ \"${USER_UPLOAD}\" == \"1\" ]; then\r\n    echo \"User upload mode - skipping git operations\"\r\n    exit 0\r\nfi\r\n\r\n# Prepare git address\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\n# Handle authentication\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo \"Using anonymous git access\"\r\nelse\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\n# Git operations\r\nif [ \"$(ls -A /mnt/server 2>/dev/null)\" ]; then\r\n    echo \"Directory not empty - checking for existing repo\"\r\n    if [ -d .git ]; then\r\n        echo \"Git repository exists\"\r\n        if [ -f .git/config ]; then\r\n            ORIGIN=$(git config --get remote.origin.url 2>/dev/null || echo \"\")\r\n            if [ \"${ORIGIN}\" == \"${GIT_ADDRESS}\" ]; then\r\n                echo \"Pulling latest changes\"\r\n                git pull\r\n            else\r\n                echo \"Different repository detected - manual intervention required\"\r\n            fi\r\n        fi\r\n    fi\r\nelse\r\n    echo \"Cloning repository\"\r\n    if [ -z \"${BRANCH}\" ]; then\r\n        git clone \"${GIT_ADDRESS}\" .\r\n    else\r\n        git clone --single-branch --branch \"${BRANCH}\" \"${GIT_ADDRESS}\" .\r\n    fi\r\nfi\r\n\r\n# Install additional Node packages if specified\r\nif [[ ! -z \"${NODE_PACKAGES}\" ]]; then\r\n    echo \"Installing additional Node packages: ${NODE_PACKAGES}\"\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\n# Install project dependencies\r\nif [ -f /mnt/server/package.json ]; then\r\n    echo \"Installing Node.js dependencies...\"\r\n    /usr/local/bin/npm install --verbose\r\n    echo \"‚úÖ Dependencies installed successfully\"\r\nelse\r\n    echo \"‚ùå No package.json found!\"\r\n    exit 1\r\nfi\r\n\r\n# Create required directories\r\necho \"Creating required directories...\"\r\nmkdir -p data cache cache/videos\r\n\r\n# Set proper permissions\r\nchmod -R 755 /mnt/server\r\n\r\necho \"‚úÖ INSTALLATION COMPLETE!\"\r\necho \"=== SYSTEM READY FOR DEPLOYMENT ===\"\r\nexit 0",
      "container": "node:20-bullseye",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "Git Repo Address",
      "description": "GitHub Repo to clone\r\n\r\nExample: https://github.com/username/repo-name",
      "env_variable": "GIT_ADDRESS",
      "default_value": "https://github.com/talmax1124/Ative-Music",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Install Branch",
      "description": "The branch to install.",
      "env_variable": "BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "User Uploads",
      "description": "Skip git and use uploaded files",
      "env_variable": "USER_UPLOAD",
      "default_value": "0",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|boolean",
      "field_type": "text"
    },
    {
      "name": "Auto Update",
      "description": "Always pulls latest changes on restart (legacy variable, always enabled)",
      "env_variable": "AUTO_UPDATE",
      "default_value": "1",
      "user_viewable": true,
      "user_editable": false,
      "rules": "required|boolean",
      "field_type": "text"
    },
    {
      "name": "Main File",
      "description": "Main application file",
      "env_variable": "MAIN_FILE",
      "default_value": "start.js",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Discord Token",
      "description": "Discord bot token",
      "env_variable": "DISCORD_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Discord Client ID",
      "description": "Discord application client ID",
      "env_variable": "CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client ID",
      "description": "Spotify API Client ID (Optional)",
      "env_variable": "SPOTIFY_CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client Secret",
      "description": "Spotify API Client Secret (Optional)",
      "env_variable": "SPOTIFY_CLIENT_SECRET",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Key ID",
      "description": "Apple Music API Key ID (Optional)",
      "env_variable": "APPLE_MUSIC_KEY_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Team ID",
      "description": "Apple Music API Team ID (Optional)",
      "env_variable": "APPLE_MUSIC_TEAM_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Apple Music Private Key",
      "description": "Apple Music API Private Key (Optional)",
      "env_variable": "APPLE_MUSIC_PRIVATE_KEY",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Node Environment",
      "description": "Node environment (development/production)",
      "env_variable": "NODE_ENV",
      "default_value": "production",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Additional Node Packages",
      "description": "Extra npm packages to install",
      "env_variable": "NODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Node Packages to Uninstall",
      "description": "Npm packages to uninstall",
      "env_variable": "UNNODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Username",
      "description": "Git username for private repos",
      "env_variable": "USERNAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Access Token",
      "description": "Git access token for private repos",
      "env_variable": "ACCESS_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    }
  ]
}