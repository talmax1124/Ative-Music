{
  "_comment": "ATIVE Music Bot - Node.js with yt-dlp Support",
  "meta": {
    "version": "PTDL_v2",
    "update_url": null
  },
  "exported_at": "2025-01-28T00:00:00+00:00",
  "name": "ATIVE Music Bot (yt-dlp + Auto-Update)",
  "author": "talmax1124@ativebot.com",
  "description": "ATIVE Music Discord bot with yt-dlp support and forced GitHub auto-updates. Pulls from https://github.com/talmax1124/Ative-Music every restart.",
  "features": [],
  "docker_images": {
    "Nodejs 20": "ghcr.io/ptero-eggs/yolks:nodejs_20",
    "Nodejs 18": "ghcr.io/ptero-eggs/yolks:nodejs_18"
  },
  "file_denylist": [],
  "startup": "echo 'üîÑ ATIVE Music Bot Starting...'; echo 'üì∫ Checking yt-dlp...'; if [ ! -f /home/container/yt-dlp ]; then echo '‚ö†Ô∏è yt-dlp not found, installing to container...'; curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /home/container/yt-dlp && chmod a+rx /home/container/yt-dlp && echo '‚úÖ yt-dlp installed'; else echo '‚úÖ yt-dlp already installed'; fi; export PATH=\"/home/container:$PATH\"; if [[ -d .git ]]; then echo 'üì° Forcing GitHub update...'; git fetch origin || echo 'Fetch failed, continuing...'; git reset --hard origin/{{BRANCH}} || git reset --hard origin/main; echo '‚úÖ Updated to latest GitHub commit'; else echo '‚ö†Ô∏è No git directory found'; fi; if [[ ! -z ${NODE_PACKAGES} ]]; then echo 'üì¶ Installing additional packages...'; /usr/local/bin/npm install ${NODE_PACKAGES}; fi; if [[ ! -z ${UNNODE_PACKAGES} ]]; then echo 'üóëÔ∏è Uninstalling packages...'; /usr/local/bin/npm uninstall ${UNNODE_PACKAGES}; fi; if [ -f /home/container/package.json ]; then echo 'üì¶ Installing dependencies...'; /usr/local/bin/npm install; fi; echo 'üöÄ Starting ATIVE Music Bot...'; /usr/local/bin/node \"/home/container/{{MAIN_FILE}}\" {{NODE_ARGS}}",
  "config": {
    "files": "{}",
    "startup": "{\r\n    \"done\": [\r\n        \"is online!\",\r\n        \"Ready!\",\r\n        \"logged in\",\r\n        \"üéµ Ative Music\"\r\n    ]\r\n}",
    "logs": "{}",
    "stop": "^C"
  },
  "scripts": {
    "installation": {
      "script": "#!/bin/bash\r\n# ATIVE Music Bot Installation Script with yt-dlp\r\n#\r\n# Server Files: /mnt/server\r\necho 'üéµ Installing ATIVE Music Bot...'\r\n\r\n# Update system and install dependencies\r\napt update\r\napt install -y git curl jq file unzip make gcc g++ python3 python3-pip ffmpeg\r\n\r\n# Install yt-dlp\r\necho 'üì∫ Installing yt-dlp...'\r\npython3 -m pip install --upgrade yt-dlp || {\r\n    echo '‚ö†Ô∏è pip install failed, trying curl method...'\r\n    curl -L https://github.com/yt-dlp/yt-dlp/releases/latest/download/yt-dlp -o /usr/local/bin/yt-dlp\r\n    chmod a+rx /usr/local/bin/yt-dlp\r\n}\r\n\r\n# Verify yt-dlp installation\r\nyt-dlp --version && echo '‚úÖ yt-dlp installed successfully' || echo '‚ö†Ô∏è yt-dlp installation may have issues'\r\n\r\n# Update npm\r\necho 'üì¶ Updating npm...'\r\nnpm install npm@latest --location=global\r\n\r\nmkdir -p /mnt/server\r\ncd /mnt/server\r\n\r\n# Set default GitHub repo if not provided\r\nif [ -z \"${GIT_ADDRESS}\" ]; then\r\n    echo 'üîó Using default ATIVE Music Bot repository'\r\n    GIT_ADDRESS=\"https://github.com/talmax1124/Ative-Music\"\r\nfi\r\n\r\n# Add .git ending if not present\r\nif [[ ${GIT_ADDRESS} != *.git ]]; then\r\n    GIT_ADDRESS=${GIT_ADDRESS}.git\r\nfi\r\n\r\n# Set up authentication if provided\r\nif [ -z \"${USERNAME}\" ] && [ -z \"${ACCESS_TOKEN}\" ]; then\r\n    echo 'üîì Using public GitHub access'\r\nelse\r\n    echo 'üîê Using authenticated GitHub access'\r\n    GIT_ADDRESS=\"https://${USERNAME}:${ACCESS_TOKEN}@$(echo -e ${GIT_ADDRESS} | cut -d/ -f3-)\"\r\nfi\r\n\r\necho \"üì° Git repository: ${GIT_ADDRESS}\"\r\necho \"üåø Branch: ${BRANCH:-main}\"\r\n\r\n# FORCE clean installation\r\nif [ \"$(ls -A /mnt/server)\" ]; then\r\n    echo 'üßπ Cleaning existing files for fresh install...'\r\n    rm -rf /mnt/server/* /mnt/server/.* 2>/dev/null || true\r\nfi\r\n\r\n# Clone the repository\r\necho 'üì• Cloning ATIVE Music Bot repository...'\r\nif [ -z ${BRANCH} ] || [ \"${BRANCH}\" == \"main\" ]; then\r\n    echo 'üåø Cloning main branch'\r\n    git clone ${GIT_ADDRESS} . || {\r\n        echo '‚ùå Failed to clone repository'\r\n        exit 1\r\n    }\r\nelse\r\n    echo \"üåø Cloning branch: ${BRANCH}\"\r\n    git clone --single-branch --branch ${BRANCH} ${GIT_ADDRESS} . || {\r\n        echo '‚ùå Failed to clone repository'\r\n        exit 1\r\n    }\r\nfi\r\n\r\n# Verify clone was successful\r\nif [ ! -f \"package.json\" ]; then\r\n    echo '‚ùå Clone failed - package.json not found'\r\n    exit 1\r\nfi\r\n\r\necho '‚úÖ Repository cloned successfully'\r\n\r\n# Install additional packages if specified\r\nif [[ ! -z ${NODE_PACKAGES} ]]; then\r\n    echo \"üì¶ Installing additional packages: ${NODE_PACKAGES}\"\r\n    /usr/local/bin/npm install ${NODE_PACKAGES}\r\nfi\r\n\r\n# Install project dependencies\r\nif [ -f \"/mnt/server/package.json\" ]; then\r\n    echo 'üì¶ Installing project dependencies...'\r\n    /usr/local/bin/npm install\r\n    echo '‚úÖ Dependencies installed'\r\nelse\r\n    echo '‚ùå package.json not found'\r\n    exit 1\r\nfi\r\n\r\necho 'üéµ ATIVE Music Bot installation completed successfully!'\r\necho 'üöÄ Ready to start with auto-updates enabled'\r\nexit 0",
      "container": "node:20-bullseye",
      "entrypoint": "bash"
    }
  },
  "variables": [
    {
      "name": "Git Repo Address",
      "description": "GitHub Repository URL (defaults to ATIVE Music Bot repo)",
      "env_variable": "GIT_ADDRESS",
      "default_value": "https://github.com/talmax1124/Ative-Music",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Install Branch",
      "description": "Git branch to install and track for updates",
      "env_variable": "BRANCH",
      "default_value": "main",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Main File",
      "description": "Main JavaScript file to run",
      "env_variable": "MAIN_FILE",
      "default_value": "start.js",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string|max:20",
      "field_type": "text"
    },
    {
      "name": "Node Arguments",
      "description": "Additional arguments for Node.js",
      "env_variable": "NODE_ARGS",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string|max:100",
      "field_type": "text"
    },
    {
      "name": "Additional Node Packages",
      "description": "Extra npm packages to install (space separated)",
      "env_variable": "NODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Uninstall Packages",
      "description": "npm packages to uninstall (space separated)",
      "env_variable": "UNNODE_PACKAGES",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Username",
      "description": "GitHub username (optional for public repos)",
      "env_variable": "USERNAME",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Git Access Token",
      "description": "GitHub Personal Access Token (optional for public repos)",
      "env_variable": "ACCESS_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Discord Token",
      "description": "Discord Bot Token",
      "env_variable": "DISCORD_TOKEN",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "required|string",
      "field_type": "text"
    },
    {
      "name": "Client ID",
      "description": "Discord Application Client ID",
      "env_variable": "CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client ID",
      "description": "Spotify API Client ID",
      "env_variable": "SPOTIFY_CLIENT_ID",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Spotify Client Secret",
      "description": "Spotify API Client Secret",
      "env_variable": "SPOTIFY_CLIENT_SECRET",
      "default_value": "",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|string",
      "field_type": "text"
    },
    {
      "name": "Port",
      "description": "Health check server port",
      "env_variable": "PORT",
      "default_value": "3000",
      "user_viewable": true,
      "user_editable": true,
      "rules": "nullable|integer",
      "field_type": "text"
    }
  ]
}