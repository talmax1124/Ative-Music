#!/usr/bin/env python3
"""
YouTube Cookie Extractor for macOS Chrome
Extracts YouTube cookies from Chrome and saves them in Netscape format for yt-dlp
"""

import os
import sqlite3
import shutil
import tempfile
from pathlib import Path
import sys

def get_chrome_cookies():
    """Extract YouTube cookies from Chrome on macOS"""
    
    # Chrome cookies database path on macOS
    chrome_cookie_path = Path.home() / 'Library/Application Support/Google/Chrome/Default/Cookies'
    
    if not chrome_cookie_path.exists():
        print("❌ Chrome cookies database not found")
        print("Make sure Chrome is installed and you've visited YouTube while logged in")
        return False
    
    # Create a temporary copy (Chrome locks the database)
    with tempfile.NamedTemporaryFile(delete=False) as tmp_file:
        temp_path = tmp_file.name
        shutil.copy2(chrome_cookie_path, temp_path)
    
    try:
        # Connect to the temporary database
        conn = sqlite3.connect(temp_path)
        cursor = conn.cursor()
        
        # Query for YouTube cookies
        cursor.execute("""
            SELECT host_key, name, value, path, expires_utc, is_secure, is_httponly
            FROM cookies
            WHERE host_key LIKE '%youtube.com'
        """)
        
        cookies = cursor.fetchall()
        conn.close()
        
        if not cookies:
            print("❌ No YouTube cookies found in Chrome")
            print("Please log in to YouTube in Chrome first")
            return False
        
        # Write cookies in Netscape format
        with open('cookies.txt', 'w') as f:
            f.write("# Netscape HTTP Cookie File\n")
            f.write("# This file was generated by extract-cookies.py\n")
            f.write("# http://curl.haxx.se/rfc/cookie_spec.html\n\n")
            
            for cookie in cookies:
                host, name, value, path, expires, secure, httponly = cookie
                
                # Format: domain flag path secure expiry name value
                domain = host if host.startswith('.') else '.' + host
                flag = 'TRUE'  # Domain flag
                secure_flag = 'TRUE' if secure else 'FALSE'
                expiry = str(expires // 1000000 - 11644473600) if expires else '0'
                
                line = f"{domain}\t{flag}\t{path}\t{secure_flag}\t{expiry}\t{name}\t{value}\n"
                f.write(line)
        
        print(f"✅ Extracted {len(cookies)} YouTube cookies from Chrome")
        print("✅ Saved to cookies.txt")
        return True
        
    except Exception as e:
        print(f"❌ Error extracting cookies: {e}")
        return False
    finally:
        # Clean up temp file
        os.unlink(temp_path)

def main():
    print("YouTube Cookie Extractor for Chrome")
    print("====================================")
    print()
    
    # Check if Chrome is running
    if os.system("pgrep -x 'Google Chrome' > /dev/null") == 0:
        print("⚠️  Chrome is currently running")
        print("For best results, close Chrome before extracting cookies")
        response = input("Continue anyway? (y/n): ")
        if response.lower() != 'y':
            print("Exiting...")
            sys.exit(0)
    
    if get_chrome_cookies():
        print("\n✅ Success! You can now restart the bot with 'npm start'")
    else:
        print("\n❌ Failed to extract cookies")
        print("\nAlternative method:")
        print("1. Install 'Get cookies.txt LOCALLY' Chrome extension")
        print("2. Visit youtube.com while logged in")
        print("3. Click the extension and export cookies")
        print("4. Save as cookies.txt in this directory")

if __name__ == "__main__":
    main()